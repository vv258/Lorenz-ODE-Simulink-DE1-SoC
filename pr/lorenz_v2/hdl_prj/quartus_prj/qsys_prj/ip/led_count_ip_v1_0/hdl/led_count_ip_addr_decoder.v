// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\hdlcoder_led_blinking\led_count_ip_addr_decoder.v
// Created: 2019-05-03 13:50:46
// 
// Generated by MATLAB 9.4 and HDL Coder 3.12
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: led_count_ip_addr_decoder
// Source Path: led_count_ip/led_count_ip_axi4/led_count_ip_addr_decoder
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module led_count_ip_addr_decoder
          (clk,
           reset,
           data_write,
           addr_sel,
           wr_enb,
           rd_enb,
           read_ip_timestamp,
           read_Read_back,
           data_read,
           write_axi_enable,
           write_Blink_frequency,
           write_Blink_direction);


  input   clk;
  input   reset;
  input   [31:0] data_write;  // ufix32
  input   [13:0] addr_sel;  // ufix14
  input   wr_enb;  // ufix1
  input   rd_enb;  // ufix1
  input   [31:0] read_ip_timestamp;  // ufix32
  input   [7:0] read_Read_back;  // ufix8
  output  [31:0] data_read;  // ufix32
  output  write_axi_enable;  // ufix1
  output  [3:0] write_Blink_frequency;  // ufix4
  output  write_Blink_direction;  // ufix1


  wire enb;
  wire decode_sel_ip_timestamp;  // ufix1
  wire const_1;  // ufix1
  wire decode_sel_Read_back;  // ufix1
  wire [31:0] const_0;  // ufix32
  reg [31:0] read_reg_ip_timestamp;  // ufix32
  wire [31:0] decode_rd_ip_timestamp;  // ufix32
  reg [7:0] read_reg_Read_back;  // ufix8
  wire [31:0] data_in_Read_back;  // ufix32
  wire [31:0] decode_rd_Read_back;  // ufix32
  wire decode_sel_axi_enable;  // ufix1
  wire reg_enb_axi_enable;  // ufix1
  wire data_in_axi_enable;  // ufix1
  reg  write_reg_axi_enable;  // ufix1
  wire decode_sel_Blink_frequency;  // ufix1
  wire reg_enb_Blink_frequency;  // ufix1
  wire [3:0] data_in_Blink_frequency;  // ufix4
  reg [3:0] write_reg_Blink_frequency;  // ufix4
  wire decode_sel_Blink_direction;  // ufix1
  wire reg_enb_Blink_direction;  // ufix1
  wire data_in_Blink_direction;  // ufix1
  reg  write_reg_Blink_direction;  // ufix1


  assign decode_sel_ip_timestamp = addr_sel == 14'b00000000000010;



  assign const_1 = 1'b1;



  assign enb = const_1;

  assign decode_sel_Read_back = addr_sel == 14'b00000001000010;



  assign const_0 = 32'b00000000000000000000000000000000;



  always @(posedge clk)
    begin : reg_ip_timestamp_process
      if (reset == 1'b1) begin
        read_reg_ip_timestamp <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_ip_timestamp <= read_ip_timestamp;
        end
      end
    end



  assign decode_rd_ip_timestamp = (decode_sel_ip_timestamp == 1'b0 ? const_0 :
              read_reg_ip_timestamp);



  always @(posedge clk)
    begin : reg_Read_back_process
      if (reset == 1'b1) begin
        read_reg_Read_back <= 8'b00000000;
      end
      else begin
        if (enb) begin
          read_reg_Read_back <= read_Read_back;
        end
      end
    end



  assign data_in_Read_back = {24'b0, read_reg_Read_back};



  assign decode_rd_Read_back = (decode_sel_Read_back == 1'b0 ? decode_rd_ip_timestamp :
              data_in_Read_back);



  assign data_read = decode_rd_Read_back;

  assign decode_sel_axi_enable = addr_sel == 14'b00000000000001;



  assign reg_enb_axi_enable = decode_sel_axi_enable & wr_enb;



  assign data_in_axi_enable = data_write[0];



  always @(posedge clk)
    begin : reg_axi_enable_process
      if (reset == 1'b1) begin
        write_reg_axi_enable <= 1'b1;
      end
      else begin
        if (enb && reg_enb_axi_enable) begin
          write_reg_axi_enable <= data_in_axi_enable;
        end
      end
    end



  assign write_axi_enable = write_reg_axi_enable;

  assign decode_sel_Blink_frequency = addr_sel == 14'b00000001000000;



  assign reg_enb_Blink_frequency = decode_sel_Blink_frequency & wr_enb;



  assign data_in_Blink_frequency = data_write[3:0];



  always @(posedge clk)
    begin : reg_Blink_frequency_process
      if (reset == 1'b1) begin
        write_reg_Blink_frequency <= 4'b0000;
      end
      else begin
        if (enb && reg_enb_Blink_frequency) begin
          write_reg_Blink_frequency <= data_in_Blink_frequency;
        end
      end
    end



  assign write_Blink_frequency = write_reg_Blink_frequency;

  assign decode_sel_Blink_direction = addr_sel == 14'b00000001000001;



  assign reg_enb_Blink_direction = decode_sel_Blink_direction & wr_enb;



  assign data_in_Blink_direction = data_write[0];



  always @(posedge clk)
    begin : reg_Blink_direction_process
      if (reset == 1'b1) begin
        write_reg_Blink_direction <= 1'b0;
      end
      else begin
        if (enb && reg_enb_Blink_direction) begin
          write_reg_Blink_direction <= data_in_Blink_direction;
        end
      end
    end



  assign write_Blink_direction = write_reg_Blink_direction;

endmodule  // led_count_ip_addr_decoder

