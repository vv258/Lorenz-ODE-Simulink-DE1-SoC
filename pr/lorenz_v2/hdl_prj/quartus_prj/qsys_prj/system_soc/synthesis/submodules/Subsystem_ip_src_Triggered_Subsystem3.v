// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\lorenz_model\Subsystem_ip_src_Triggered_Subsystem3.v
// Created: 2019-05-03 14:53:01
// 
// Generated by MATLAB 9.4 and HDL Coder 3.12
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem_ip_src_Triggered_Subsystem3
// Source Path: lorenz_model/Subsystem/Triggered Subsystem3
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem_ip_src_Triggered_Subsystem3
          (clk,
           reset,
           enb,
           RST,
           Trigger,
           x,
           y,
           z);


  input   clk;
  input   reset;
  input   enb;
  input   RST;
  input   Trigger;
  output  signed [26:0] x;  // sfix27_En20
  output  signed [26:0] y;  // sfix27_En20
  output  signed [26:0] z;  // sfix27_En20


  reg  Trigger_delayed;
  wire Trigger_delayed_inverted;
  wire Trigger_emulated;
  wire enb_gated;
  wire signed [26:0] sigma_dt_out1;  // sfix27_En20
  wire signed [26:0] dt_out1;  // sfix27_En20
  wire signed [26:0] rho_out1;  // sfix27_En20
  wire signed [26:0] beta_dt_out1;  // sfix27_En20
  wire signed [26:0] z0_out1;  // sfix27_En20
  wire signed [26:0] y0_out1;  // sfix27_En20
  wire signed [26:0] x0_out1;  // sfix27_En20
  reg signed [26:0] Unit_Delay1_out1;  // sfix27_En20
  wire signed [53:0] y_dt_mul_temp;  // sfix54_En40
  wire signed [26:0] y_dt_out1;  // sfix27_En20
  reg signed [26:0] Unit_Delay2_out1;  // sfix27_En20
  wire signed [53:0] Product3_mul_temp;  // sfix54_En40
  wire signed [26:0] Product3_out1;  // sfix27_En20
  wire signed [26:0] x_dt_out1;  // sfix27_En20
  wire signed [53:0] Product1_mul_temp;  // sfix54_En40
  wire signed [26:0] Product1_out1;  // sfix27_En20
  wire signed [26:0] Subtract2_out1;  // sfix27_En20
  wire signed [26:0] Triggered_Subsystem2_out1;  // sfix27_En20
  wire signed [26:0] Subtract1_out1;  // sfix27_En20
  reg signed [26:0] Unit_Delay_out1;  // sfix27_En20
  wire signed [53:0] x_dt_mul_temp;  // sfix54_En40
  wire signed [53:0] Product_mul_temp;  // sfix54_En40
  wire signed [26:0] Product_out1;  // sfix27_En20
  wire signed [26:0] Subtract3_out1;  // sfix27_En20
  wire signed [26:0] Triggered_Subsystem1_out1;  // sfix27_En20
  wire signed [26:0] Subtract_out1;  // sfix27_En20
  wire signed [53:0] Product2_mul_temp;  // sfix54_En40
  wire signed [26:0] Product2_out1;  // sfix27_En20
  wire signed [26:0] Triggered_Subsystem_out1;  // sfix27_En20
  wire signed [26:0] Unit_Delay_out1_1;  // sfix27_En20
  reg signed [26:0] Unit_Delay_out1_last_value;  // sfix27_En20
  wire signed [26:0] Unit_Delay1_out1_1;  // sfix27_En20
  reg signed [26:0] Unit_Delay1_out1_last_value;  // sfix27_En20
  wire signed [26:0] Unit_Delay2_out1_1;  // sfix27_En20
  reg signed [26:0] Unit_Delay2_out1_last_value;  // sfix27_En20


  always @(posedge clk or posedge reset)
    begin : Trigger_delay_process
      if (reset == 1'b1) begin
        Trigger_delayed <= 1'b1;
      end
      else begin
        if (enb) begin
          Trigger_delayed <= Trigger;
        end
      end
    end



  assign Trigger_delayed_inverted =  ~ Trigger_delayed;



  assign Trigger_emulated = Trigger_delayed_inverted & Trigger;



  assign enb_gated = Trigger_emulated && enb;

  assign sigma_dt_out1 = 27'sb000000000000010100011111010;



  assign dt_out1 = 27'sb000000000000000010000011001;



  assign rho_out1 = 27'sb001110000000000000000000000;



  assign beta_dt_out1 = 27'sb000000000000000011011001101;



  assign z0_out1 = 27'sb001100100000000000000000000;



  assign y0_out1 = 27'sb000000000011001100110011010;



  assign x0_out1 = 27'sb111111100000000000000000000;



  assign y_dt_mul_temp = Unit_Delay1_out1 * dt_out1;
  assign y_dt_out1 = y_dt_mul_temp[46:20];



  assign Product3_mul_temp = Unit_Delay2_out1 * beta_dt_out1;
  assign Product3_out1 = Product3_mul_temp[46:20];



  assign Product1_mul_temp = x_dt_out1 * Unit_Delay1_out1;
  assign Product1_out1 = Product1_mul_temp[46:20];



  assign Subtract2_out1 = Product1_out1 - Product3_out1;



  Subsystem_ip_src_Triggered_Subsystem u_Triggered_Subsystem2 (.clk(clk),
                                                               .reset(reset),
                                                               .enb(enb_gated),
                                                               .u(Subtract2_out1),  // sfix27_En20
                                                               .reset_1(RST),
                                                               .u0(z0_out1),  // sfix27_En20
                                                               .Out1(Triggered_Subsystem2_out1)  // sfix27_En20
                                                               );

  always @(posedge clk or posedge reset)
    begin : Unit_Delay2_process
      if (reset == 1'b1) begin
        Unit_Delay2_out1 <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb_gated) begin
          Unit_Delay2_out1 <= Triggered_Subsystem2_out1;
        end
      end
    end



  assign Subtract1_out1 = rho_out1 - Unit_Delay2_out1;



  assign x_dt_mul_temp = Unit_Delay_out1 * dt_out1;
  assign x_dt_out1 = x_dt_mul_temp[46:20];



  assign Product_mul_temp = x_dt_out1 * Subtract1_out1;
  assign Product_out1 = Product_mul_temp[46:20];



  assign Subtract3_out1 = Product_out1 - y_dt_out1;



  Subsystem_ip_src_Triggered_Subsystem u_Triggered_Subsystem1 (.clk(clk),
                                                               .reset(reset),
                                                               .enb(enb_gated),
                                                               .u(Subtract3_out1),  // sfix27_En20
                                                               .reset_1(RST),
                                                               .u0(y0_out1),  // sfix27_En20
                                                               .Out1(Triggered_Subsystem1_out1)  // sfix27_En20
                                                               );

  always @(posedge clk or posedge reset)
    begin : Unit_Delay1_process
      if (reset == 1'b1) begin
        Unit_Delay1_out1 <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb_gated) begin
          Unit_Delay1_out1 <= Triggered_Subsystem1_out1;
        end
      end
    end



  assign Subtract_out1 = Unit_Delay1_out1 - Unit_Delay_out1;



  assign Product2_mul_temp = sigma_dt_out1 * Subtract_out1;
  assign Product2_out1 = Product2_mul_temp[46:20];



  Subsystem_ip_src_Triggered_Subsystem u_Triggered_Subsystem (.clk(clk),
                                                              .reset(reset),
                                                              .enb(enb_gated),
                                                              .u(Product2_out1),  // sfix27_En20
                                                              .reset_1(RST),
                                                              .u0(x0_out1),  // sfix27_En20
                                                              .Out1(Triggered_Subsystem_out1)  // sfix27_En20
                                                              );

  always @(posedge clk or posedge reset)
    begin : Unit_Delay_process
      if (reset == 1'b1) begin
        Unit_Delay_out1 <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb_gated) begin
          Unit_Delay_out1 <= Triggered_Subsystem_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : out0_bypass_process
      if (reset == 1'b1) begin
        Unit_Delay_out1_last_value <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb_gated) begin
          Unit_Delay_out1_last_value <= Unit_Delay_out1_1;
        end
      end
    end



  assign Unit_Delay_out1_1 = (Trigger_emulated == 1'b0 ? Unit_Delay_out1_last_value :
              Unit_Delay_out1);



  assign x = Unit_Delay_out1_1;

  always @(posedge clk or posedge reset)
    begin : out1_bypass_process
      if (reset == 1'b1) begin
        Unit_Delay1_out1_last_value <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb_gated) begin
          Unit_Delay1_out1_last_value <= Unit_Delay1_out1_1;
        end
      end
    end



  assign Unit_Delay1_out1_1 = (Trigger_emulated == 1'b0 ? Unit_Delay1_out1_last_value :
              Unit_Delay1_out1);



  assign y = Unit_Delay1_out1_1;

  always @(posedge clk or posedge reset)
    begin : out2_bypass_process
      if (reset == 1'b1) begin
        Unit_Delay2_out1_last_value <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb_gated) begin
          Unit_Delay2_out1_last_value <= Unit_Delay2_out1_1;
        end
      end
    end



  assign Unit_Delay2_out1_1 = (Trigger_emulated == 1'b0 ? Unit_Delay2_out1_last_value :
              Unit_Delay2_out1);



  assign z = Unit_Delay2_out1_1;

endmodule  // Subsystem_ip_src_Triggered_Subsystem3

