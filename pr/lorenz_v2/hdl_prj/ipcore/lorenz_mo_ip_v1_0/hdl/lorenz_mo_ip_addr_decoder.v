// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\lorenz_model\lorenz_mo_ip_addr_decoder.v
// Created: 2019-04-22 12:40:01
// 
// Generated by MATLAB 9.4 and HDL Coder 3.12
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: lorenz_mo_ip_addr_decoder
// Source Path: lorenz_mo_ip/lorenz_mo_ip_axi4/lorenz_mo_ip_addr_decoder
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module lorenz_mo_ip_addr_decoder
          (clk,
           reset,
           data_write,
           addr_sel,
           wr_enb,
           rd_enb,
           read_ip_timestamp,
           read_x,
           read_y,
           read_z,
           data_read,
           write_axi_enable,
           write_sigma,
           write_x0,
           write_rho,
           write_y0,
           write_beta,
           write_z0,
           write_dt);


  input   clk;
  input   reset;
  input   [31:0] data_write;  // ufix32
  input   [13:0] addr_sel;  // ufix14
  input   wr_enb;  // ufix1
  input   rd_enb;  // ufix1
  input   [31:0] read_ip_timestamp;  // ufix32
  input   signed [26:0] read_x;  // sfix27_En20
  input   signed [26:0] read_y;  // sfix27_En20
  input   signed [26:0] read_z;  // sfix27_En20
  output  [31:0] data_read;  // ufix32
  output  write_axi_enable;  // ufix1
  output  signed [26:0] write_sigma;  // sfix27_En20
  output  signed [26:0] write_x0;  // sfix27_En20
  output  signed [26:0] write_rho;  // sfix27_En20
  output  signed [26:0] write_y0;  // sfix27_En20
  output  signed [26:0] write_beta;  // sfix27_En20
  output  signed [26:0] write_z0;  // sfix27_En20
  output  signed [26:0] write_dt;  // sfix27_En20


  wire enb;
  wire decode_sel_ip_timestamp;  // ufix1
  wire const_1;  // ufix1
  wire decode_sel_z;  // ufix1
  wire decode_sel_y;  // ufix1
  wire decode_sel_x;  // ufix1
  wire [31:0] const_0;  // ufix32
  reg [31:0] read_reg_ip_timestamp;  // ufix32
  wire [31:0] decode_rd_ip_timestamp;  // ufix32
  reg signed [26:0] read_reg_x;  // sfix27_En20
  wire [31:0] data_in_x;  // ufix32
  wire [31:0] decode_rd_x;  // ufix32
  reg signed [26:0] read_reg_y;  // sfix27_En20
  wire [31:0] data_in_y;  // ufix32
  wire [31:0] decode_rd_y;  // ufix32
  reg signed [26:0] read_reg_z;  // sfix27_En20
  wire [31:0] data_in_z;  // ufix32
  wire [31:0] decode_rd_z;  // ufix32
  wire decode_sel_axi_enable;  // ufix1
  wire reg_enb_axi_enable;  // ufix1
  wire data_in_axi_enable;  // ufix1
  reg  write_reg_axi_enable;  // ufix1
  wire decode_sel_sigma;  // ufix1
  wire reg_enb_sigma;  // ufix1
  wire signed [26:0] data_in_sigma;  // sfix27_En20
  reg signed [26:0] write_reg_sigma;  // sfix27_En20
  wire decode_sel_x0;  // ufix1
  wire reg_enb_x0;  // ufix1
  wire signed [26:0] data_in_x0;  // sfix27_En20
  reg signed [26:0] write_reg_x0;  // sfix27_En20
  wire decode_sel_rho;  // ufix1
  wire reg_enb_rho;  // ufix1
  wire signed [26:0] data_in_rho;  // sfix27_En20
  reg signed [26:0] write_reg_rho;  // sfix27_En20
  wire decode_sel_y0;  // ufix1
  wire reg_enb_y0;  // ufix1
  wire signed [26:0] data_in_y0;  // sfix27_En20
  reg signed [26:0] write_reg_y0;  // sfix27_En20
  wire decode_sel_beta;  // ufix1
  wire reg_enb_beta;  // ufix1
  wire signed [26:0] data_in_beta;  // sfix27_En20
  reg signed [26:0] write_reg_beta;  // sfix27_En20
  wire decode_sel_z0;  // ufix1
  wire reg_enb_z0;  // ufix1
  wire signed [26:0] data_in_z0;  // sfix27_En20
  reg signed [26:0] write_reg_z0;  // sfix27_En20
  wire decode_sel_dt;  // ufix1
  wire reg_enb_dt;  // ufix1
  wire signed [26:0] data_in_dt;  // sfix27_En20
  reg signed [26:0] write_reg_dt;  // sfix27_En20


  assign decode_sel_ip_timestamp = addr_sel == 14'b00000000000010;



  assign const_1 = 1'b1;



  assign enb = const_1;

  assign decode_sel_z = addr_sel == 14'b00000001001001;



  assign decode_sel_y = addr_sel == 14'b00000001001000;



  assign decode_sel_x = addr_sel == 14'b00000001000111;



  assign const_0 = 32'b00000000000000000000000000000000;



  always @(posedge clk or posedge reset)
    begin : reg_ip_timestamp_process
      if (reset == 1'b1) begin
        read_reg_ip_timestamp <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_ip_timestamp <= read_ip_timestamp;
        end
      end
    end



  assign decode_rd_ip_timestamp = (decode_sel_ip_timestamp == 1'b0 ? const_0 :
              read_reg_ip_timestamp);



  always @(posedge clk or posedge reset)
    begin : reg_x_process
      if (reset == 1'b1) begin
        read_reg_x <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_x <= read_x;
        end
      end
    end



  assign data_in_x = {{5{read_reg_x[26]}}, read_reg_x};



  assign decode_rd_x = (decode_sel_x == 1'b0 ? decode_rd_ip_timestamp :
              data_in_x);



  always @(posedge clk or posedge reset)
    begin : reg_y_process
      if (reset == 1'b1) begin
        read_reg_y <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_y <= read_y;
        end
      end
    end



  assign data_in_y = {{5{read_reg_y[26]}}, read_reg_y};



  assign decode_rd_y = (decode_sel_y == 1'b0 ? decode_rd_x :
              data_in_y);



  always @(posedge clk or posedge reset)
    begin : reg_z_process
      if (reset == 1'b1) begin
        read_reg_z <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb) begin
          read_reg_z <= read_z;
        end
      end
    end



  assign data_in_z = {{5{read_reg_z[26]}}, read_reg_z};



  assign decode_rd_z = (decode_sel_z == 1'b0 ? decode_rd_y :
              data_in_z);



  assign data_read = decode_rd_z;

  assign decode_sel_axi_enable = addr_sel == 14'b00000000000001;



  assign reg_enb_axi_enable = decode_sel_axi_enable & wr_enb;



  assign data_in_axi_enable = data_write[0];



  always @(posedge clk or posedge reset)
    begin : reg_axi_enable_process
      if (reset == 1'b1) begin
        write_reg_axi_enable <= 1'b1;
      end
      else begin
        if (enb && reg_enb_axi_enable) begin
          write_reg_axi_enable <= data_in_axi_enable;
        end
      end
    end



  assign write_axi_enable = write_reg_axi_enable;

  assign decode_sel_sigma = addr_sel == 14'b00000001000000;



  assign reg_enb_sigma = decode_sel_sigma & wr_enb;



  assign data_in_sigma = $signed(data_write[26:0]);



  always @(posedge clk or posedge reset)
    begin : reg_sigma_process
      if (reset == 1'b1) begin
        write_reg_sigma <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_sigma) begin
          write_reg_sigma <= data_in_sigma;
        end
      end
    end



  assign write_sigma = write_reg_sigma;

  assign decode_sel_x0 = addr_sel == 14'b00000001000001;



  assign reg_enb_x0 = decode_sel_x0 & wr_enb;



  assign data_in_x0 = $signed(data_write[26:0]);



  always @(posedge clk or posedge reset)
    begin : reg_x0_process
      if (reset == 1'b1) begin
        write_reg_x0 <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_x0) begin
          write_reg_x0 <= data_in_x0;
        end
      end
    end



  assign write_x0 = write_reg_x0;

  assign decode_sel_rho = addr_sel == 14'b00000001000010;



  assign reg_enb_rho = decode_sel_rho & wr_enb;



  assign data_in_rho = $signed(data_write[26:0]);



  always @(posedge clk or posedge reset)
    begin : reg_rho_process
      if (reset == 1'b1) begin
        write_reg_rho <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_rho) begin
          write_reg_rho <= data_in_rho;
        end
      end
    end



  assign write_rho = write_reg_rho;

  assign decode_sel_y0 = addr_sel == 14'b00000001000011;



  assign reg_enb_y0 = decode_sel_y0 & wr_enb;



  assign data_in_y0 = $signed(data_write[26:0]);



  always @(posedge clk or posedge reset)
    begin : reg_y0_process
      if (reset == 1'b1) begin
        write_reg_y0 <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_y0) begin
          write_reg_y0 <= data_in_y0;
        end
      end
    end



  assign write_y0 = write_reg_y0;

  assign decode_sel_beta = addr_sel == 14'b00000001000100;



  assign reg_enb_beta = decode_sel_beta & wr_enb;



  assign data_in_beta = $signed(data_write[26:0]);



  always @(posedge clk or posedge reset)
    begin : reg_beta_process
      if (reset == 1'b1) begin
        write_reg_beta <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_beta) begin
          write_reg_beta <= data_in_beta;
        end
      end
    end



  assign write_beta = write_reg_beta;

  assign decode_sel_z0 = addr_sel == 14'b00000001000101;



  assign reg_enb_z0 = decode_sel_z0 & wr_enb;



  assign data_in_z0 = $signed(data_write[26:0]);



  always @(posedge clk or posedge reset)
    begin : reg_z0_process
      if (reset == 1'b1) begin
        write_reg_z0 <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_z0) begin
          write_reg_z0 <= data_in_z0;
        end
      end
    end



  assign write_z0 = write_reg_z0;

  assign decode_sel_dt = addr_sel == 14'b00000001000110;



  assign reg_enb_dt = decode_sel_dt & wr_enb;



  assign data_in_dt = $signed(data_write[26:0]);



  always @(posedge clk or posedge reset)
    begin : reg_dt_process
      if (reset == 1'b1) begin
        write_reg_dt <= 27'sb000000000000000000000000000;
      end
      else begin
        if (enb && reg_enb_dt) begin
          write_reg_dt <= data_in_dt;
        end
      end
    end



  assign write_dt = write_reg_dt;

endmodule  // lorenz_mo_ip_addr_decoder

