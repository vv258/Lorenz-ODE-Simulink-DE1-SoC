// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\hdlcoder_led_blinking\led_count_ip_src_led_counter.v
// Created: 2019-05-03 13:50:34
// 
// Generated by MATLAB 9.4 and HDL Coder 3.12
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.001
// Target subsystem base rate: 0.001
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.001
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// LED                           ce_out        0.001
// Read_back                     ce_out        0.001
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: led_count_ip_src_led_counter
// Source Path: hdlcoder_led_blinking/led_counter
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module led_count_ip_src_led_counter
          (clk,
           reset,
           clk_enable,
           Blink_frequency,
           Blink_direction,
           ce_out,
           LED,
           Read_back);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [3:0] Blink_frequency;  // ufix4
  input   Blink_direction;
  output  ce_out;
  output  [7:0] LED;  // uint8
  output  [7:0] Read_back;  // uint8


  wire enb;
  reg  Blink_direction_1;
  wire [3:0] alpha1_D_Lookup_Table_k;  // ufix4
  wire [23:0] alpha1_D_Lookup_Table_1 [0:15];  // ufix24 [16]
  wire [23:0] alpha1_D_Lookup_Table_out1;  // ufix24
  reg [23:0] alpha1_D_Lookup_Table_out1_1;  // ufix24
  wire Relational_Operator_relop1;
  reg [23:0] HDL_Counter1_out1;  // ufix24
  wire Relational_Operator_out1;
  reg [7:0] HDL_Counter_count;  // ufix8
  wire [7:0] HDL_Counter_count_next;  // ufix8
  wire [7:0] HDL_Counter_count_step;  // ufix8
  wire [7:0] HDL_Counter_out1;  // uint8

  initial begin
    alpha1_D_Lookup_Table_out1_1 = 24'b000000000000000000000000;
  end

  assign enb = clk_enable;

  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        Blink_direction_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Blink_direction_1 <= Blink_direction;
        end
      end
    end



  assign alpha1_D_Lookup_Table_1[0] = 24'b100000000000000000000000;
  assign alpha1_D_Lookup_Table_1[1] = 24'b010000000000000000000000;
  assign alpha1_D_Lookup_Table_1[2] = 24'b001000000000000000000000;
  assign alpha1_D_Lookup_Table_1[3] = 24'b000100000000000000000000;
  assign alpha1_D_Lookup_Table_1[4] = 24'b000010000000000000000000;
  assign alpha1_D_Lookup_Table_1[5] = 24'b000001000000000000000000;
  assign alpha1_D_Lookup_Table_1[6] = 24'b000000100000000000000000;
  assign alpha1_D_Lookup_Table_1[7] = 24'b000000010000000000000000;
  assign alpha1_D_Lookup_Table_1[8] = 24'b000000001000000000000000;
  assign alpha1_D_Lookup_Table_1[9] = 24'b000000000100000000000000;
  assign alpha1_D_Lookup_Table_1[10] = 24'b000000000010000000000000;
  assign alpha1_D_Lookup_Table_1[11] = 24'b000000000001000000000000;
  assign alpha1_D_Lookup_Table_1[12] = 24'b000000000000100000000000;
  assign alpha1_D_Lookup_Table_1[13] = 24'b000000000000010000000000;
  assign alpha1_D_Lookup_Table_1[14] = 24'b000000000000001000000000;
  assign alpha1_D_Lookup_Table_1[15] = 24'b000000000000000100000000;
  assign alpha1_D_Lookup_Table_k = (Blink_frequency == 4'b0000 ? 4'b0000 :
              (Blink_frequency == 4'b1111 ? 4'b1111 :
              Blink_frequency));
  assign alpha1_D_Lookup_Table_out1 = alpha1_D_Lookup_Table_1[alpha1_D_Lookup_Table_k];


  always @(posedge clk)
    begin : PipelineRegister_process
      if (enb) begin
        alpha1_D_Lookup_Table_out1_1 <= alpha1_D_Lookup_Table_out1;
      end
    end



  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk)
    begin : HDL_Counter1_process
      if (reset == 1'b1) begin
        HDL_Counter1_out1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          if (Relational_Operator_relop1 == 1'b1) begin
            HDL_Counter1_out1 <= 24'b000000000000000000000000;
          end
          else begin
            HDL_Counter1_out1 <= HDL_Counter1_out1 + 24'b000000000000000000000001;
          end
        end
      end
    end


  assign Relational_Operator_relop1 = HDL_Counter1_out1 == alpha1_D_Lookup_Table_out1_1;


  assign Relational_Operator_out1 = Relational_Operator_relop1;

  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  always @(posedge clk)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_count <= 8'b00000000;
      end
      else begin
        if (enb && Relational_Operator_out1) begin
          HDL_Counter_count <= HDL_Counter_count_next;
        end
      end
    end

  assign HDL_Counter_out1 = HDL_Counter_count;
  assign HDL_Counter_count_step = (Blink_direction_1 == 1'b1 ? 8'b00000001 :
              8'b11111111);
  assign HDL_Counter_count_next = HDL_Counter_count + HDL_Counter_count_step;


  assign LED = HDL_Counter_out1;

  assign Read_back = HDL_Counter_out1;

  assign ce_out = clk_enable;

endmodule  // led_count_ip_src_led_counter

